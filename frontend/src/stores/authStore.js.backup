import { create } from 'zustand';
import { persist } from 'zustand/middleware';
import { authService } from '../services/authService';
import toast from 'react-hot-toast';

export const useAuthStore = create(
  persist(
    (set, get) => ({
      user: null,
      token: null,
      isLoading: false,
      isAuthenticated: false,

      // Actions
      setAuth: (user, token) => {
        set({
          user,
          token,
          isAuthenticated: !!user && !!token,
        });
        
        // Set token in axios defaults
        if (token) {
          authService.setAuthToken(token);
        }
      },

      clearAuth: () => {
        set({
          user: null,
          token: null,
          isAuthenticated: false,
        });
        
        // Remove token from axios defaults
        authService.removeAuthToken();
      },

      login: async (credentials) => {
        set({ isLoading: true });
        
        try {
          const response = await authService.login(credentials);
          const { user, token } = response.data.data;
          
          // Set auth with explicit isAuthenticated flag
          set({
            user,
            token,
            isAuthenticated: true,
            isLoading: false
          });
          
          // Set token in axios
          authService.setAuthToken(token);
          
          toast.success(`Welcome back, ${user.firstName}!`);
          return { success: true, user };
        } catch (error) {
          console.error('Login error:', error);
          const message = error.response?.data?.error || 'Login failed';
          toast.error(message);
          set({ isLoading: false });
          return { success: false, error: message };
        }
      },

      register: async (userData) => {
        set({ isLoading: true });
        
        try {
          const response = await authService.register(userData);
          const { user, token } = response.data.data;
          
          // Set auth with explicit isAuthenticated flag
          set({
            user,
            token,
            isAuthenticated: true,
            isLoading: false
          });
          
          // Set token in axios
          authService.setAuthToken(token);
          
          toast.success(`Welcome to SkillShare, ${user.firstName}!`);
          return { success: true, user };
        } catch (error) {
          console.error('Registration error:', error);
          const message = error.response?.data?.error || 'Registration failed';
          toast.error(message);
          set({ isLoading: false });
          return { success: false, error: message };
        }
      },

      logout: async () => {
        try {
          await authService.logout();
        } catch (error) {
          console.error('Logout error:', error);
        } finally {
          get().clearAuth();
          toast.success('Logged out successfully');
        }
      },

      checkAuth: async () => {
        const { token, user } = get();
        
        if (!token) {
          get().clearAuth();
          return;
        }

        // If we have both token and user, we're authenticated
        if (user && token) {
          // Set authenticated state
          set({ isAuthenticated: true });
          authService.setAuthToken(token);
          return;
        }

        try {
          const response = await authService.getMe();
          const { user: fetchedUser } = response.data.data;
          
          get().setAuth(fetchedUser, token);
        } catch (error) {
          console.error('Auth check failed:', error);
          // Don't clear auth immediately - maybe server is temporarily down
          // get().clearAuth();
        }
      },

      updateProfile: async (profileData) => {
        set({ isLoading: true });
        
        try {
          const response = await authService.updateProfile(profileData);
          const { user } = response.data;
          
          set({ user });
          toast.success('Profile updated successfully');
          return { success: true, user };
        } catch (error) {
          const message = error.response?.data?.error || 'Profile update failed';
          toast.error(message);
          return { success: false, error: message };
        } finally {
          set({ isLoading: false });
        }
      },

      updatePassword: async (passwordData) => {
        set({ isLoading: true });
        
        try {
          await authService.updatePassword(passwordData);
          toast.success('Password updated successfully');
          return { success: true };
        } catch (error) {
          const message = error.response?.data?.error || 'Password update failed';
          toast.error(message);
          return { success: false, error: message };
        } finally {
          set({ isLoading: false });
        }
      },

      forgotPassword: async (email) => {
        set({ isLoading: true });
        
        try {
          await authService.forgotPassword(email);
          toast.success('Password reset instructions sent to your email');
          return { success: true };
        } catch (error) {
          const message = error.response?.data?.error || 'Failed to send reset email';
          toast.error(message);
          return { success: false, error: message };
        } finally {
          set({ isLoading: false });
        }
      },

      resetPassword: async (token, newPassword) => {
        set({ isLoading: true });
        
        try {
          await authService.resetPassword(token, newPassword);
          toast.success('Password reset successfully');
          return { success: true };
        } catch (error) {
          const message = error.response?.data?.error || 'Password reset failed';
          toast.error(message);
          return { success: false, error: message };
        } finally {
          set({ isLoading: false });
        }
      },

      verifyEmail: async (token) => {
        set({ isLoading: true });
        
        try {
          await authService.verifyEmail(token);
          toast.success('Email verified successfully');
          return { success: true };
        } catch (error) {
          const message = error.response?.data?.error || 'Email verification failed';
          toast.error(message);
          return { success: false, error: message };
        } finally {
          set({ isLoading: false });
        }
      },

      resendVerification: async () => {
        set({ isLoading: true });
        
        try {
          await authService.resendVerification();
          toast.success('Verification email sent');
          return { success: true };
        } catch (error) {
          const message = error.response?.data?.error || 'Failed to send verification email';
          toast.error(message);
          return { success: false, error: message };
        } finally {
          set({ isLoading: false });
        }
      },
    }),
    {
      name: 'auth-storage',
      partialize: (state) => ({
        user: state.user,
        token: state.token,
        isAuthenticated: state.isAuthenticated,
      }),
    }
  )
);
